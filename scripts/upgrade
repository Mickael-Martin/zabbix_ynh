#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME
trustedversion="1:4.2.1-1+stretch"
trustedVersionRepo="4.2-1+stretch"
export domain=$(ynh_app_setting_get "$app" domain)
export path_url=$(ynh_app_setting_get "$app" path)
#admin=$(ynh_app_setting_get "$app" admin) #not used
is_public=$(ynh_app_setting_get "$app" is_public)
final_path=$(ynh_app_setting_get "$app" final_path)
#language=$(ynh_app_setting_get "$app" language) #not used
db_name=$(ynh_app_setting_get "$app" db_name)
db_user=$(ynh_app_setting_get "$app" db_user)
db_pwd=$(ynh_app_setting_get "$app" mysqlpwd)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set "$app" is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set "$app" is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set "$app" db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set "$app" final_path "$final_path"
fi

export mysqlconn="mysql -u$db_user -p$db_pwd $db_name"

#=================================================
# DISABLED SSOWAT
#=================================================
ynh_print_info "disable SSOWAT temporaly"
ynh_app_setting_set "$app" unprotected_uris "/"
systemctl reload nginx
yunohost app ssowatconf

#=================================================
# Enable default admin temporaly
#=================================================
enable_admin_user

#=================================================
# Import Yunohost template
#=================================================
import_template

#=================================================
# Link Yunohost template to the ZAbbix Server Host
#=================================================
link_template

#=================================================
# Disable default admin for security issue
#=================================================
disable_admin_user

#=================================================
# Disable default guest for security issue
#=================================================
disable_guest_user

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

#REMOVE NONFREE PART PATCH IF NEEDED (snmp-mibs-downloader (non-free) installed in version 1)
nonfreepackagelist=$(dpkg-query -W -f='${Section}\t${Package}\n' | grep ^non-free)
if [ $(echo $nonfreepackagelist | wc -l) -eq 1 ] && [ $(echo $nonfreepackagelist | grep -c "snmp-mibs-downloader") -eq 1 ] ;then 
	ynh_print_info "Removing snmp-mibs-downloader (non-free package)"
	want backup, cannot use ynh_replace_string 
    sed --in-place==.$(date "+%m%d%y") 's/ snmp-mibs-downloader,//g' /var/lib/dpkg/status
    DEBIAN_FRONTEND=noninteractive apt purge snmp-mibs-downloader -y
    if [ -f /etc/apt/sources.list.d/non-free.list ];then
        ynh_secure_remove /etc/apt/sources.list.d/non-free.list
    fi
fi

#Patch timeout too short for zabbix agent if needed
timeout_ok=$(grep -c "^Timeout" /etc/zabbix/zabbix_agentd.conf 2>/dev/null)
if [ $timeout_ok -ne 1 ] ;then
    ynh_replace_string --match_string="# Timeout=3" --replace_string="# Timeout=3\nTimeout=10" --target_file=/etc/zabbix/zabbix_agentd.conf
    systemctl enable zabbix-agent && systemctl restart zabbix-agent
fi    

#patch if zabbix-release installed
if [ "$(dpkg -l zabbix-release 2>/dev/null | wc -l)" -ne 0 ];then
    DEBIAN_FRONTEND=noninteractive apt purge zabbix-release -y
    install_zabbix_repo
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
#REMOVE DUPLICATE LOG ENTRY IN LOGROTATE PATCH IF NEEDED
ynh_remove_logrotate

ynh_print_info "Check if new zabbix version is available on repo"
ynh_package_update

zabbixServerInstalledVersion=$(apt-cache policy zabbix-server-mysql | sed -n '2p' | grep -Po ".*: \K(.*)")
zabbixServerCandidateVersion=$(apt-cache policy zabbix-server-mysql | sed -n '3p' | grep -Po ".*: \K(.*)")

zabbixFrontendInstalledVersion=$(apt-cache policy zabbix-frontend-php | sed -n '2p' | grep -Po ".*: \K(.*)")
zabbixFrontendCandidateVersion=$(apt-cache policy zabbix-frontend-php | sed -n '3p' | grep -Po ".*: \K(.*)")

zabbixagentInstalledVersion=$(apt-cache policy zabbix-agent | sed -n '2p' | grep -Po ".*: \K(.*)")
zabbixagentCandidateVersion=$(apt-cache policy zabbix-agent | sed -n '3p' | grep -Po ".*: \K(.*)")

if [ "$trustedversion" == "$zabbixServerCandidateVersion" ]
then

	if [ "$zabbixServerInstalledVersion" != "$zabbixServerCandidateVersion" ] || [ "$zabbixFrontendInstalledVersion" != "$zabbixFrontendCandidateVersion" ] || [ "$zabbixagentInstalledVersion" != "$zabbixagentCandidateVersion" ] 
	then
	    #=================================================
	    # BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
	    #=================================================
	    
	    # Backup the current version of the app
	    ynh_backup_before_upgrade
	    ynh_clean_setup () {
		# restore it if the upgrade fails
		ynh_restore_upgradebackup
	    }
	    # Exit if an error occurs during the execution of the script
	    ynh_abort_if_errors
	    
	    cp -rp /etc/zabbix /tmp/
	    cp -p /usr/share/zabbix/conf/zabbix.conf.php /tmp/
	    
	    DEBIAN_FRONTEND=noninteractive apt-mark unhold zabbix-server-mysql zabbix-frontend-php

        ynh_print_info "Update and install dependencies"
        ynh_package_update
        ynh_install_app_dependencies libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap liblua5.2-0 php7.0 php-bcmath php7.0-bcmath ttf-dejavu-core php7.0-bcmath patch smistrip unzip wget fping libcap2-bin libiksemel3 libopenipmi0 libpam-cap libsnmp-base libsnmp30 snmptrapd snmpd libjs-prototype jq zabbix-server-mysql zabbix-agent zabbix-frontend-php
        DEBIAN_FRONTEND=noninteractive apt-mark hold zabbix-server-mysql zabbix-frontend-php

	    
	    rm /usr/share/zabbix/conf/zabbix.conf.php
	    cp -rpf /tmp/zabbix /etc/
	    cp -pf /tmp/zabbix.conf.php /usr/share/zabbix/conf/
	    
	    rm -fr /tmp/zabbix*
	    
	    #If needed.
	    yunohost service add snmpd -d "Management of SNMP Daemon"
        yunohost service add zabbix-server -d "Management Zabbix server daemon : Collect, agregate, compute and notify"
        yunohost service add zabbix-agent -d "Management Zabbix agent daemon : send informations about this host to the server"
	    
	    #test if zabbix server is started
        check_proc_zabbixagent
        
        #test if zabbix agent is started
        check_proc_zabbixserver

	else
		ynh_print_info "No update from repo ! (Already up to date)"
	fi
else
	ynh_print_info "No update from repo ! (Trusted version)"
fi

#=================================================
# RE-ENABLE SSOWAT
#=================================================
ynh_print_info "re-enable SSOWAT"
# Make app private if necessary
if [ $is_public -eq 0 ]
then
    # unprotected_uris allows SSO credentials to be passed anyway.
    ynh_app_setting_delete "$app" unprotected_uris
else
    ynh_app_setting_set "$app" unprotected_uris "/"
fi

systemctl reload nginx
yunohost app ssowatconf
